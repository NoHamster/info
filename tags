!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	backslash	/slash or backslash/
!_TAG_OUTPUT_MODE	e-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	C:/Users/New/Desktop/Projekte/PATRISPREDICTUM/Projekte/Info/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20220612.0/
ANSI	format.h	/^        bool ANSI;$/;"	m	struct:info_format	typeref:typename:bool
ANSI	info_internal.h	/^                info_buffer ANSI;$/;"	m	union:info_internal_drawcall::__anon921aa803010a	typeref:typename:info_buffer
ANSI_rule	ANSI.c	/^typedef uint8_t ANSI_rule[3];$/;"	t	typeref:typename:uint8_t[3]	file:
ANSI_support	stream_internal.h	/^        bool ANSI_support;$/;"	m	struct:info_stream	typeref:typename:bool
Buff_find	List/List.c	/^void *Buff_find(char *start, char *end, size_t el_size, bool (*compare)(void*, void*), void *arg/;"	f	typeref:typename:void *
COUNT	info.h	/^	COUNT$/;"	e	enum:INFO_TYPE
D_ANSI	info_internal.h	/^        D_ANSI,$/;"	e	enum:info_internal_drawcall_type
D_TEXT	info_internal.h	/^        D_TEXT,$/;"	e	enum:info_internal_drawcall_type
ERROR	info.h	/^#define ERROR(/;"	d
FATAL	info.h	/^#define FATAL(/;"	d
HOLD	info.h	/^#define HOLD /;"	d
INFO	info.h	/^#define INFO(/;"	d
INFO_ANSI_COLOR	ANSI.h	/^#define INFO_ANSI_COLOR(/;"	d
INFO_ANSI_normal_color	ANSI.h	/^#define INFO_ANSI_normal_color(/;"	d
INFO_FOREACH_FUNC	info.h	/^	INFO_FOREACH_FUNC(INFO_GENERATE_ENUM)$/;"	e	enum:INFO_TYPE
INFO_FOREACH_FUNC	info.h	/^#define INFO_FOREACH_FUNC(/;"	d
INFO_FORMAT_FORMAT_DEFAULT	format.h	/^#define INFO_FORMAT_FORMAT_DEFAULT /;"	d
INFO_FORMAT_NEWLINE_DEFAULT	format.h	/^#define INFO_FORMAT_NEWLINE_DEFAULT /;"	d
INFO_GENERATE_ANSI	info.h	/^#define INFO_GENERATE_ANSI(/;"	d
INFO_GENERATE_ENUM	info.h	/^#define INFO_GENERATE_ENUM(/;"	d
INFO_GENERATE_STRING	info.c	/^#define INFO_GENERATE_STRING(/;"	d	file:
INFO_INTERNAL_MSG	info.h	/^#define INFO_INTERNAL_MSG(/;"	d
INFO_INTERNAL_MSG_SETUP	info.h	/^#define INFO_INTERNAL_MSG_SETUP(/;"	d
INFO_TYPE	info.h	/^enum INFO_TYPE$/;"	g
List	List/List.h	/^typedef struct _List* List;$/;"	t	typeref:struct:_List *
List_append	List/List.c	/^void* List_append(List l, const void *element)$/;"	f	typeref:typename:void *
List_at	List/List.c	/^static inline void* List_at(List l, size_t index)$/;"	f	typeref:typename:void *	file:
List_capacity	List/List.c	/^size_t List_capacity(List l){return l->max;}$/;"	f	typeref:typename:size_t
List_clear	List/List.c	/^void List_clear(List l)$/;"	f	typeref:typename:void
List_copy	List/List.c	/^bool List_copy(List a, List b)$/;"	f	typeref:typename:bool
List_create	List/List.c	/^List List_create(size_t element_size)$/;"	f	typeref:typename:List
List_end	List/List.c	/^void* List_end(List l){return l->data+(l->size*l->element_size);}$/;"	f	typeref:typename:void *
List_find	List/List.c	/^void *List_find(List l, bool (*compare)(void*, void*), void *arg)$/;"	f	typeref:typename:void *
List_free	List/List.c	/^void List_free(List l)$/;"	f	typeref:typename:void
List_get	List/List.c	/^void* List_get(List l, size_t index)$/;"	f	typeref:typename:void *
List_pop	List/List.c	/^void* List_pop(List l)$/;"	f	typeref:typename:void *
List_reserve	List/List.c	/^bool List_reserve(List l, size_t capacity)$/;"	f	typeref:typename:bool
List_size	List/List.c	/^size_t List_size(List l){return l->size;}$/;"	f	typeref:typename:size_t
List_start	List/List.c	/^void* List_start(List l){return l->data;}$/;"	f	typeref:typename:void *
PRINT	info.h	/^#define PRINT(/;"	d
RELEASE	info.h	/^#define RELEASE /;"	d
SEG_BEGIN	info.h	/^#define SEG_BEGIN(/;"	d
SUCCESS	info.h	/^#define SUCCESS(/;"	d
SessionLoad	Session.vim	/^let SessionLoad = 1$/;"	v
ZERO	info.h	/^	ZERO,$/;"	e	enum:INFO_TYPE
_List	List/List.c	/^struct _List{$/;"	s	file:
__anon921aa803010a	info_internal.h	/^        union{$/;"	u	struct:info_internal_drawcall
b	ANSI.h	/^        uin8_t r,g,b;$/;"	m	struct:info_ANSI_color	typeref:typename:uin8_t
background	ANSI.h	/^                               background;$/;"	m	struct:info_ANSI	typeref:struct:info_ANSI_color
cursor	buffer.c	/^        size_t cursor;$/;"	m	struct:info_internal_buffer	typeref:typename:size_t	file:
data	List/List.c	/^	char *data;$/;"	m	struct:_List	typeref:typename:char *	file:
drawcall_list	info_internal.h	/^        List drawcall_list;$/;"	m	struct:info_internal_Msg	typeref:typename:List
element_size	List/List.c	/^	size_t element_size;$/;"	m	struct:_List	typeref:typename:size_t	file:
end	format.c	/^        char *start, end;$/;"	m	struct:info_internal_format_substring	typeref:typename:char	file:
f	stream_internal.h	/^        FILE *f;$/;"	m	struct:info_stream	typeref:typename:FILE *
file	info.h	/^	const char *file;$/;"	m	struct:info_Origin	typeref:typename:const char *
forground	ANSI.h	/^        struct info_ANSI_color forground,$/;"	m	struct:info_ANSI	typeref:struct:info_ANSI_color
format	format.h	/^        const char *format;$/;"	m	struct:info_format	typeref:typename:const char *
format	stream_internal.h	/^        info_Formats format;$/;"	m	struct:info_stream	typeref:typename:info_Formats
func	info.h	/^	const char *func;$/;"	m	struct:info_Origin	typeref:typename:const char *
g	ANSI.h	/^        uin8_t r,g,b;$/;"	m	struct:info_ANSI_color	typeref:typename:uin8_t
hold	info.c	/^bool hold;$/;"	v	typeref:typename:bool
info_ANSI	ANSI.h	/^struct info_ANSI$/;"	s
info_ANSI	info.h	/^static struct info_ANSI info_ANSI[] = {$/;"	v	typeref:struct:info_ANSI[]
info_ANSI_color	ANSI.h	/^struct info_ANSI_color$/;"	s
info_Formats	format.h	/^typedef struct info_foramt info_Formats[(enum INFO_TYPE)COUNT];$/;"	t	typeref:struct:info_foramt[(enum INFO_TYPE)COUNT]
info_Msg_origin	info.c	/^void info_Msg_origin(struct info_Origin origin)$/;"	f	typeref:typename:void
info_Msg_type	info.c	/^void info_Msg_type(enum INFO_TYPE type)$/;"	f	typeref:typename:void
info_Origin	info.h	/^struct info_Origin$/;"	s
info_buffer	buffer.h	/^typedef struct info_internal_buffer *info_buffer;$/;"	t	typeref:struct:info_internal_buffer *
info_foramt_default	format.h	/^struct info_foramt info_foramt_default = { INFO_FORMAT_FORMAT_DEFAULT, INFO_FORMAT_NEWLINE_DEFAU/;"	v	typeref:struct:info_foramt
info_format	format.h	/^struct info_format$/;"	s
info_format_function	format.h	/^struct info_format_function$/;"	s
info_hold	info.c	/^void info_hold(void)$/;"	f	typeref:typename:void
info_internal_ANSI_mode_apply	ANSI.c	/^static char *info_internal_ANSI_mode_apply(int8_t a, int8_t b)$/;"	f	typeref:typename:char *	file:
info_internal_ANSI_switch	ANSI.c	/^void info_internal_ANSI_switch(const struct info_ANSI *ANSI, List drawcall_list)$/;"	f	typeref:typename:void
info_internal_Msg	info_internal.h	/^struct info_internal_Msg$/;"	s
info_internal_buffer	buffer.c	/^struct info_internal_buffer$/;"	s	file:
info_internal_buffer_append	buffer.c	/^bool info_internal_buffer_append(info_buffer buf, const char *str, size_t length)$/;"	f	typeref:typename:bool
info_internal_buffer_create	buffer.c	/^info_buffer info_internal_buffer_create(size_t size)$/;"	f	typeref:typename:info_buffer
info_internal_buffer_free	buffer.c	/^void info_internal_buffer_free(info_buffer buffer)$/;"	f	typeref:typename:void
info_internal_buffer_reserve	buffer.c	/^bool info_internal_buffer_reserve(info_buffer buf, size_t size)$/;"	f	typeref:typename:bool
info_internal_buffer_seek	buffer.c	/^bool info_internal_buffer_seek(info_buffer buffer, size_t pos)$/;"	f	typeref:typename:bool
info_internal_buffer_str	buffer.c	/^char *info_internal_buffer_str(info_buffer buffer){$/;"	f	typeref:typename:char *
info_internal_buffer_tell	buffer.c	/^size_t info_internal_buffer_tell(info_buffer buffer)$/;"	f	typeref:typename:size_t
info_internal_buffer_vprintf	buffer.c	/^bool info_internal_buffer_vprintf(info_buffer buffer, const char *format, va_list args)$/;"	f	typeref:typename:bool
info_internal_drawcall	info_internal.h	/^struct info_internal_drawcall$/;"	s
info_internal_drawcall_type	info_internal.h	/^enum info_internal_drawcall_type$/;"	g
info_internal_foramt_eval	format.c	/^bool info_internal_foramt_eval(struct info_internal_buffer *out, info_Formats *format, List draw/;"	f	typeref:typename:bool
info_internal_format_substring	format.c	/^struct info_internal_format_substring$/;"	s	file:
info_internal_stream_formats_set	stream.c	/^static void info_internal_stream_formats_set(info_stream stream, bool ANSI_support)$/;"	f	typeref:typename:void	file:
info_internal_type_ids	info.c	/^const char *info_internal_type_ids[] = {$/;"	v	typeref:typename:const char * []
info_printf	info.c	/^void info_printf(const char *format, ...)$/;"	f	typeref:typename:void
info_release	info.c	/^void info_release(void)$/;"	f	typeref:typename:void
info_stream	stream.h	/^typedef struct info_internal_stream* info_stream;$/;"	t	typeref:struct:info_internal_stream *
info_stream	stream_internal.h	/^struct info_stream$/;"	s
intensity	ANSI.h	/^        int8_t intensity:2; \/\/  2 faint < 0; 22 normal = 0; 1 bold > 0$/;"	m	struct:info_ANSI	typeref:typename:int8_t:2
invert	ANSI.h	/^        int8_t invert:1; \/\/ 7 | 27$/;"	m	struct:info_ANSI	typeref:typename:int8_t:1
line	info.h	/^	size_t line;$/;"	m	struct:info_Origin	typeref:typename:size_t
max	List/List.c	/^	size_t max;$/;"	m	struct:_List	typeref:typename:size_t	file:
message	info.c	/^struct info_internal_Msg message;$/;"	v	typeref:struct:info_internal_Msg
name	format.c	/^        const char *name;$/;"	m	struct:info_internal_format_substring	typeref:typename:const char *	file:
name	format.h	/^        const char *name;$/;"	m	struct:info_format_function	typeref:typename:const char *
newline	format.h	/^        const char *newline;$/;"	m	struct:info_format	typeref:typename:const char *
normal	ANSI.h	/^        int8_t normal:1; \/\/ 0$/;"	m	struct:info_ANSI	typeref:typename:int8_t:1
origin	info_internal.h	/^        struct info_Origin origin;$/;"	m	struct:info_internal_Msg	typeref:struct:info_Origin
overline	ANSI.h	/^        int8_t overline:1; \/\/ 53 | 5$/;"	m	struct:info_ANSI	typeref:typename:int8_t:1
r	ANSI.h	/^        uin8_t r,g,b;$/;"	m	struct:info_ANSI_color	typeref:typename:uin8_t
s:l	Session.vim	/^let s:l = 1 - ((0 * winheight(0) + 40) \/ 80)$/;"	v
s:l	Session.vim	/^let s:l = 11 - ((10 * winheight(0) + 40) \/ 80)$/;"	v
s:l	Session.vim	/^let s:l = 15 - ((14 * winheight(0) + 40) \/ 80)$/;"	v
s:l	Session.vim	/^let s:l = 17 - ((8 * winheight(0) + 20) \/ 40)$/;"	v
s:l	Session.vim	/^let s:l = 18 - ((17 * winheight(0) + 19) \/ 39)$/;"	v
s:l	Session.vim	/^let s:l = 20 - ((19 * winheight(0) + 40) \/ 80)$/;"	v
s:l	Session.vim	/^let s:l = 3 - ((2 * winheight(0) + 40) \/ 80)$/;"	v
s:l	Session.vim	/^let s:l = 39 - ((38 * winheight(0) + 40) \/ 80)$/;"	v
s:l	Session.vim	/^let s:l = 4 - ((3 * winheight(0) + 40) \/ 80)$/;"	v
s:l	Session.vim	/^let s:l = 7 - ((6 * winheight(0) + 40) \/ 80)$/;"	v
s:l	Session.vim	/^let s:l = 9 - ((8 * winheight(0) + 40) \/ 80)$/;"	v
s:save_splitbelow	Session.vim	/^let s:save_splitbelow = &splitbelow$/;"	v
s:save_splitright	Session.vim	/^let s:save_splitright = &splitright$/;"	v
s:save_winminheight	Session.vim	/^let s:save_winminheight = &winminheight$/;"	v
s:save_winminwidth	Session.vim	/^let s:save_winminwidth = &winminwidth$/;"	v
s:so_save	Session.vim	/^let s:so_save = &g:so | let s:siso_save = &g:siso | setg so=0 siso=0 | setl so=-1 siso=-1$/;"	v
s:sx	Session.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:wipebuf	Session.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
shortname	format.h	/^        char shortname;$/;"	m	struct:info_format_function	typeref:typename:char
size	List/List.c	/^	size_t size;$/;"	m	struct:_List	typeref:typename:size_t	file:
size	buffer.c	/^        size_t size;$/;"	m	struct:info_internal_buffer	typeref:typename:size_t	file:
start	format.c	/^        char *start, end;$/;"	m	struct:info_internal_format_substring	typeref:typename:char *	file:
str	buffer.c	/^        char *str;$/;"	m	struct:info_internal_buffer	typeref:typename:char *	file:
strike	ANSI.h	/^        int8_t strike:1; \/\/ 9 | 29$/;"	m	struct:info_ANSI	typeref:typename:int8_t:1
text	info_internal.h	/^                info_buffer text;$/;"	m	union:info_internal_drawcall::__anon921aa803010a	typeref:typename:info_buffer
type	info_internal.h	/^        enum INFO_TYPE type;$/;"	m	struct:info_internal_Msg	typeref:enum:INFO_TYPE
type	info_internal.h	/^        enum info_internal_drawcall_type type;$/;"	m	struct:info_internal_drawcall	typeref:enum:info_internal_drawcall_type
underline	ANSI.h	/^        uint8_t underline:2; \/\/  24 non | 4 single | 21 double$/;"	m	struct:info_ANSI	typeref:typename:uint8_t:2
